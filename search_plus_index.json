{"index.html": {"url": "index.html", "title": "介绍", "keywords": "", "body": "SeleniumDocumentationSeleniumDocumentation官方原文档：https://seleniumhq.github.io/selenium/docs/api/py/api.html本文档源于官方文档翻译整理，如有翻译错误或描述错误，请邮件告知我，谢谢！Email:liushilive@outlook.com1.Common方法说明selenium.common.exceptions在所有的webdriver代码中可能发生的异常。2.Webdriver.common方法说明selenium.webdriver.common.action_chainsActionChains实现selenium.webdriver.common.alertAlert实现selenium.webdriver.common.byBy实现selenium.webdriver.common.desired_capabilitiesDesiredCapabilities实现selenium.webdriver.common.keysKeys实现selenium.webdriver.common.touch_actionsTouchActions实现selenium.webdriver.common.utilsUtils实现selenium.webdriver.common.proxyProxy实现selenium.webdriver.common.serviceselenium.webdriver.common.html5.application_cacheApplicationCache实现3.Webdriver.support方法说明selenium.webdriver.support.abstract_event_listener事件侦听器抽象类selenium.webdriver.support.color颜色转换类selenium.webdriver.support.event_firing_webdriverwebdriver事件触发器selenium.webdriver.support.expected_conditions预期的条件selenium.webdriver.support.select下拉框处理selenium.webdriver.support.wait等待4.Webdriver.android方法说明selenium.webdriver.android.webdriverSelendroid5.Webdriver.chrome方法说明selenium.webdriver.chrome.optionsChrome参数选项selenium.webdriver.chrome.serviceChromeDriver服务selenium.webdriver.chrome.webdriverChromeDriver实例6.Webdriver.firefox方法说明selenium.webdriver.firefox.extension_connection扩展连接selenium.webdriver.firefox.firefox_binaryFirefox二进制文件的新实例selenium.webdriver.firefox.options选项selenium.webdriver.firefox.firefox_profile配置文件selenium.webdriver.firefox.webdriverFirefox的新本地会话7.Webdriver.ie方法说明selenium.webdriver.ie.webdriverIE新实例8.Webdriver.opera方法说明selenium.webdriver.opera.webdriveropera实例9.Webdriver.phantomjs方法说明selenium.webdriver.phantomjs.servicePhantomJS服务selenium.webdriver.phantomjs.webdriverPhantomJS对象10.Webdriver.remote方法说明selenium.webdriver.remote.command定义标准WebDriver命令的常量selenium.webdriver.remote.errorhandlerWebDriver协议中定义的错误代码selenium.webdriver.remote.mobilemobile实现selenium.webdriver.remote.remote_connection自定义HTTP错误处理程序selenium.webdriver.remote.utils工具类selenium.webdriver.remote.webdriverWebDriver实现selenium.webdriver.remote.webelement元素相关11.Webdriver.safari方法说明selenium.webdriver.safari.serviceSafariDriver对象selenium.webdriver.safari.webdriverSafariDriver实例"}, "md/selenium/common/exceptions.html": {"url": "md/selenium/common/exceptions.html", "title": "selenium.common.exceptions", "keywords": "", "body": "selenium.common.exceptions在所有的webdriver代码中可能发生的异常。exceptionselenium.common.exceptions.ElementClickInterceptedException(msg=None,screen=None,stacktrace=None)元素单击命令无法完成，因为接收事件的元素会遮挡所请求的元素。exceptionselenium.common.exceptions.ElementNotInteractableException(msg=None,screen=None,stacktrace=None)当元素存在于DOM中，但与该元素的交互将命中另一个元素时抛出exceptionselenium.common.exceptions.ElementNotSelectableException(msg=None,screen=None,stacktrace=None)在尝试选择不可选择元素时引发。例如，选择一个&quot;script&quot;元素。exceptionselenium.common.exceptions.ElementNotVisibleException(msg=None,screen=None,stacktrace=None)DOM上存在元素，但它不可见，因此无法与之交互时引发。在尝试单击或读取隐藏在视图中的元素的文本时遇到的最常见情况。exceptionselenium.common.exceptions.ErrorInResponseException(response,msg)在服务器端发生错误时引发。当与firefox扩展或remotedriverserver进行通信时，可能会发生这种情况。exceptionselenium.common.exceptions.ImeActivationFailedException(msg=None,screen=None,stacktrace=None)激活IME引擎失败后抛出exceptionselenium.common.exceptions.ImeNotAvailableException(msg=None,screen=None,stacktrace=None)当IME支持不可用时抛出。如果计算机上没有IME支持，则会为每个与IME相关的方法调用抛出此异常。exceptionselenium.common.exceptions.InsecureCertificateException(msg=None,screen=None,stacktrace=None)安全证书异常。命中一个证书警告，这通常是过期或无效的TLS证书的结果。exceptionselenium.common.exceptions.InvalidArgumentException(msg=None,screen=None,stacktrace=None)传递给命令的参数无效或格式错误。exceptionselenium.common.exceptions.InvalidCookieDomainException(msg=None,screen=None,stacktrace=None)尝试在与当前URL不同的域下添加cookie时抛出。exceptionselenium.common.exceptions.InvalidCoordinatesException(msg=None,screen=None,stacktrace=None)为交互操作提供的坐标无效。exceptionselenium.common.exceptions.InvalidElementStateException(msg=None,screen=None,stacktrace=None)由于元素处于无效状态而无法完成命令时引发。这可能是由于试图清除不可编辑和复位的元素所致。exceptionselenium.common.exceptions.InvalidSelectorException(msg=None,screen=None,stacktrace=None)当用于查找元素的选择器未返回WebElement时抛出。目前这只发生在选择器是xpath表达式并且它在语法上无效（即它不是xpath表达式）或表达式没有选择WebElements（例如：count(//input)）时。exceptionselenium.common.exceptions.InvalidSessionIdException(msg=None,screen=None,stacktrace=None)如果给定的会话ID不在活动会话列表中，则意味着会话不存在或者它不活动。exceptionselenium.common.exceptions.InvalidSwitchToTargetException(msg=None,screen=None,stacktrace=None)当要切换的frame或window目标不存在时抛出。exceptionselenium.common.exceptions.JavascriptException(msg=None,screen=None,stacktrace=None)执行用户提供的JavaScript时发生错误。exceptionselenium.common.exceptions.MoveTargetOutOfBoundsException(msg=None,screen=None,stacktrace=None)当提供给ActionsChainsmove()方法的目标无效（即超出文档）时引发。exceptionselenium.common.exceptions.NoAlertPresentException(msg=None,screen=None,stacktrace=None)切换到未显示警报时抛出。当屏幕上还没有警报时，可以通过调用Alert()类上的操作来引起这种情况。exceptionselenium.common.exceptions.NoSuchAttributeException(msg=None,screen=None,stacktrace=None)无法找到元素的属性时抛出。可能需要检查该属性是否存在于正在测试的特定浏览器中。某些浏览器可能具有相同属性的不同属性名称。（IE8.innerText与Firefox.textContent）exceptionselenium.common.exceptions.NoSuchCookieException(msg=None,screen=None,stacktrace=None)在当前浏览器的cookies中找不到与给定路径名匹配的cookie。exceptionselenium.common.exceptions.NoSuchElementException(msg=None,screen=None,stacktrace=None)无法找到元素时抛出。如果遇到此异常，您可能需要检查以下内容：检查find_by...中使用的选择器在查找操作时，元素可能尚未出现在屏幕上（网页仍在加载），参阅selenium.webdriver.support.wait.WebDriverWait()编写等待包装器以等待元素出现exceptionselenium.common.exceptions.NoSuchFrameException(msg=None,screen=None,stacktrace=None)当要切换的frame目标不存在时抛出。exceptionselenium.common.exceptions.NoSuchWindowException(msg=None,screen=None,stacktrace=None)当不存在要切换的窗口目标时抛出。要查找当前活动窗口句柄集，可以按以下方式获取活动窗口句柄的列表：print(driver.window_handles)exceptionselenium.common.exceptions.RemoteDriverServerException(msg=None,screen=None,stacktrace=None)远程驱动服务器异常exceptionselenium.common.exceptions.ScreenshotException(msg=None,screen=None,stacktrace=None)无法截屏。exceptionselenium.common.exceptions.SessionNotCreatedException(msg=None,screen=None,stacktrace=None)无法创建新会话。exceptionselenium.common.exceptions.StaleElementReferenceException(msg=None,screen=None,stacktrace=None)当对元素的引用陈旧时引发。陈旧意味着该元素不再出现在页面的DOM中。StaleElementReferenceException的可能原因包括但不限于：不再位于同一页面上，或者自找到该元素后页面可能已刷新。该元素可能已被删除并重新添加到屏幕中，因为它已找到。例如重新定位的元素。当更新值并重建节点时，通常可以使用javascript框架进行此操作。元素可能已在iframe或其他刷新的上下文中。exceptionselenium.common.exceptions.TimeoutException(msg=None,screen=None,stacktrace=None)当命令没有在足够的时间内完成时抛出。exceptionselenium.common.exceptions.UnableToSetCookieException(msg=None,screen=None,stacktrace=None)当驱动程序无法设置cookie时抛出。exceptionselenium.common.exceptions.UnexpectedAlertPresentException(msg=None,screen=None,stacktrace=None,alert_text=None)出现意外警报时引发。通常在预期的模式阻止webdriver窗体执行更多命令时引发。exceptionselenium.common.exceptions.UnexpectedTagNameException(msg=None,screen=None,stacktrace=None)当支持类没有得到预期的web元素时引发。exceptionselenium.common.exceptions.UnknownMethodException(msg=None,screen=None,stacktrace=None)请求的命令与已知URL匹配，但与该URL的方法不匹配。exceptionselenium.common.exceptions.WebDriverException(msg=None,screen=None,stacktrace=None)webdriver异常基类"}, "md/selenium/webdriver/common/action_chains.html": {"url": "md/selenium/webdriver/common/action_chains.html", "title": "selenium.webdriver.common.action_chains", "keywords": "", "body": "selenium.webdriver.common.action_chainsActionChains实现1.classselenium.webdriver.common.action_chains.ActionChains(driver)ActionChains是一种自动执行低级别交互的方法，例如鼠标移动，鼠标按钮操作，按键和上下文菜单交互。这对于执行更复杂的操作非常有用，例如悬停和拖放。1.1.生成用户操作。在ActionChains对象上调用操作方法时，操作将存储在ActionChains对象的队列中。当调用perform()时，事件将按它们排队的顺序触发。ActionChains可用于链式模式：menu=driver.find_element_by_css_selector(&quot;.nav&quot;)hidden_submenu=driver.find_element_by_css_selector(&quot;.nav#submenu1&quot;)ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()或者可以逐个排队，然后执行：menu=driver.find_element_by_css_selector(&quot;.nav&quot;)hidden_submenu=driver.find_element_by_css_selector(&quot;.nav#submenu1&quot;)actions=ActionChains(driver)actions.move_to_element(menu)actions.click(hidden_submenu)actions.perform()无论哪种方式，动作都按照它们被调用的顺序一个接一个地执行。1.2.ActionChains(driver)创建一个新的ActionChains。参数：driver:执行用户操作的WebDriver实例。1.3.click(on_element=None)单击元素。参数：on_element:要单击的元素。如果为None，则单击当前鼠标位置。1.4.click_and_hold(on_element=None)在元素上按住鼠标左键。参数：on_element:鼠标按下的元素。如果为None，则单击当前鼠标位置。1.5.context_click(on_element=None)在元素上执行上下文单击（右键单击）。参数：on_element:上下文单击的元素。如果为None，则单击当前鼠标位置。1.6.double_click(on_element=None)双击元素。参数：on_element:双击的元素。如果为None，则单击当前鼠标位置。1.7.drag_and_drop(source,target)在源元素上按住鼠标左键，然后移动到目标元素并释放鼠标按键。参数：source:在这个元素上按下鼠标左键target:移动到这个元素释放鼠标按键1.8.drag_and_drop_by_offset(source,xoffset,yoffset)在源元素上按住鼠标左键，然后移动一个偏移量并释放鼠标按键。参数：source:在这个元素上按下鼠标左键xoffset:X轴偏移量yoffset:Y轴偏移量1.9.key_down(value,element=None)仅发送按键，而不释放它。只能与修饰键（Control，Alt和Shift）一起使用。参数：value:要发送的修饰键，修饰键常量在Keys类中定义element:要发送按键的元素，如果为None，则发送到当前焦点元素举例，按ctrl+c:ActionChains(driver).key_down(Keys.CONTROL).send_keys(&#x27;c&#x27;).key_up(Keys.CONTROL).perform()1.10.key_up(value,element=None)释放按键参数：value:要发送的修饰键，修饰键常量在Keys类中定义element:要发送按键的元素，如果为None，则发送到当前焦点元素举例，按ctrl+c:ActionChains(driver).key_down(Keys.CONTROL).send_keys(&#x27;c&#x27;).key_up(Keys.CONTROL).perform()1.11.move_by_offset(xoffset,yoffset)将鼠标移动到当前鼠标位置的偏移量。参数：xoffset:X轴偏移量，一个正整数或负整数yoffset:Y轴偏移量，一个正整数或负整数1.12.move_to_element(to_element)将鼠标移动到元素的中间。参数：to_element:要移动到的WebElement。1.13.move_to_element_with_offset(to_element,xoffset,yoffset)将鼠标移动指定元素的偏移量。偏移量相对于元素的左上角。参数：to_element:要移动到的WebElement。xoffset:X轴偏移量yoffset:X轴偏移量1.14.pause(seconds)以秒为单位暂停指定持续时间内的所有输入1.15.perform()执行所有存储的操作。1.16.release(on_element=None)释放元素上的鼠标按钮。参数：on_element:鼠标移动的元素。如果为None，则释放当前鼠标位置。1.17.reset_actions()清除已存储在远程端的操作。1.18.send_keys(*keys_to_send)将按键发送到当前焦点元素。参数：keys_to_send:要发送的按键，修饰键常量在Keys类中定义1.19.send_keys_to_element(element,*keys_to_send)将按键发送到元素参数：element:要发送按键的元素keys_to_send:要发送的按键，修饰键常量在Keys类中定义"}, "md/selenium/webdriver/common/alert.html": {"url": "md/selenium/webdriver/common/alert.html", "title": "selenium.webdriver.common.alert", "keywords": "", "body": "selenium.webdriver.common.alertAlert实现1.classselenium.webdriver.common.alert.Alert(driver)允许使用警告框。使用这个类与警告提示交互。它包含了从警告提示中取消、接受、输入和获取文本的方法。1.1.接受/取消警告框提示Alert(driver).accept()Alert(driver).dismiss()1.2.在警告框提示中输入值name_prompt=Alert(driver)name_prompt.send_keys(&quot;WillianShakesphere&quot;)name_prompt.accept()1.3.阅读提示进行验证的文本alert_text=Alert(driver).textself.assertEqual(&quot;Doyouwishtoquit?&quot;,alert_text)1.4.Alert(driver)创建一个新警告框对象。参数：driver:执行用户操作的WebDriver实例。1.5.accept()接受可用的警告框。Alert(driver).accept()#确认警告对话框。1.6.dismiss()取消可用的警告框。1.7.send_keys(keysToSend)发送参数：keysToSend:要发送到警告框的按键1.8.text获取警告框文本"}, "md/selenium/webdriver/common/by.html": {"url": "md/selenium/webdriver/common/by.html", "title": "selenium.webdriver.common.by", "keywords": "", "body": "selenium.webdriver.common.byBy实现1.classselenium.webdriver.common.by.By一组定位策略CLASS_NAME='classname'CSS_SELECTOR='cssselector'ID='id'LINK_TEXT='linktext'NAME='name'PARTIAL_LINK_TEXT='partiallinktext'TAG_NAME='tagname'XPATH='xpath'"}, "md/selenium/webdriver/common/desired_capabilities.html": {"url": "md/selenium/webdriver/common/desired_capabilities.html", "title": "selenium.webdriver.common.desired_capabilities", "keywords": "", "body": "selenium.webdriver.common.desired_capabilitiesDesiredCapabilities实现1.classselenium.webdriver.common.desired_capabilities.DesiredCapabilities一组默认支持的期望能力集。使用此作为创建所需功能对象的起点，以请求远程Web驱动程序连接到seleniumserver或seleniumgrid。用法示例：fromseleniumimportwebdriverselenium_grid_url=&quot;http://127.0.0.1:4444/wd/hub&quot;#创建所需的功能对象作为起始点。capabilities=DesiredCapabilities.FIREFOX.copy()capabilities[&#x27;platform&#x27;]=&quot;WINDOWS&quot;capabilities[&#x27;version&#x27;]=&quot;10&quot;#使用所需的功能实例化远程WebDriver的实例。driver=webdriver.Remote(desired_capabilities=capabilities,command_executor=selenium_grid_url)注意：始终在DesiredCapabilities对象使用.copy()，避免修改全局类实例产生副作用。ANDROID={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;android&#x27;,&#x27;platform&#x27;:&#x27;ANDROID&#x27;}CHROME={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;chrome&#x27;,&#x27;platform&#x27;:&#x27;ANY&#x27;}EDGE={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;MicrosoftEdge&#x27;,&#x27;platform&#x27;:&#x27;WINDOWS&#x27;}FIREFOX={&#x27;browserName&#x27;:&#x27;firefox&#x27;,&#x27;acceptInsecureCerts&#x27;:True,&#x27;marionette&#x27;:True}HTMLUNIT={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;htmlunit&#x27;,&#x27;platform&#x27;:&#x27;ANY&#x27;}HTMLUNITWITHJS={&#x27;version&#x27;:&#x27;firefox&#x27;,&#x27;browserName&#x27;:&#x27;htmlunit&#x27;,&#x27;javascriptEnabled&#x27;:True,&#x27;platform&#x27;:&#x27;ANY&#x27;}INTERNETEXPLORER={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;internetexplorer&#x27;,&#x27;platform&#x27;:&#x27;WINDOWS&#x27;}IPAD={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;iPad&#x27;,&#x27;platform&#x27;:&#x27;MAC&#x27;}IPHONE={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;iPhone&#x27;,&#x27;platform&#x27;:&#x27;MAC&#x27;}OPERA={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;opera&#x27;,&#x27;platform&#x27;:&#x27;ANY&#x27;}PHANTOMJS={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;phantomjs&#x27;,&#x27;javascriptEnabled&#x27;:True,&#x27;platform&#x27;:&#x27;ANY&#x27;}SAFARI={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;safari&#x27;,&#x27;platform&#x27;:&#x27;MAC&#x27;}WEBKITGTK={&#x27;version&#x27;:&#x27;&#x27;,&#x27;browserName&#x27;:&#x27;MiniBrowser&#x27;,&#x27;platform&#x27;:&#x27;ANY&#x27;}"}, "md/selenium/webdriver/common/keys.html": {"url": "md/selenium/webdriver/common/keys.html", "title": "selenium.webdriver.common.keys", "keywords": "", "body": "selenium.webdriver.common.keysKeys实现1.classselenium.webdriver.common.keys.Keys特殊键代码集。ADD=u&#x27;\\ue025&#x27;ALT=u&#x27;\\ue00a&#x27;ARROW_DOWN=u&#x27;\\ue015&#x27;ARROW_LEFT=u&#x27;\\ue012&#x27;ARROW_RIGHT=u&#x27;\\ue014&#x27;ARROW_UP=u&#x27;\\ue013&#x27;BACKSPACE=u&#x27;\\ue003&#x27;BACK_SPACE=u&#x27;\\ue003&#x27;CANCEL=u&#x27;\\ue001&#x27;CLEAR=u&#x27;\\ue005&#x27;COMMAND=u&#x27;\\ue03d&#x27;CONTROL=u&#x27;\\ue009&#x27;DECIMAL=u&#x27;\\ue028&#x27;DELETE=u&#x27;\\ue017&#x27;DIVIDE=u&#x27;\\ue029&#x27;DOWN=u&#x27;\\ue015&#x27;END=u&#x27;\\ue010&#x27;ENTER=u&#x27;\\ue007&#x27;EQUALS=u&#x27;\\ue019&#x27;ESCAPE=u&#x27;\\ue00c&#x27;F1=u&#x27;\\ue031&#x27;F10=u&#x27;\\ue03a&#x27;F11=u&#x27;\\ue03b&#x27;F12=u&#x27;\\ue03c&#x27;F2=u&#x27;\\ue032&#x27;F3=u&#x27;\\ue033&#x27;F4=u&#x27;\\ue034&#x27;F5=u&#x27;\\ue035&#x27;F6=u&#x27;\\ue036&#x27;F7=u&#x27;\\ue037&#x27;F8=u&#x27;\\ue038&#x27;F9=u&#x27;\\ue039&#x27;HELP=u&#x27;\\ue002&#x27;HOME=u&#x27;\\ue011&#x27;INSERT=u&#x27;\\ue016&#x27;LEFT=u&#x27;\\ue012&#x27;LEFT_ALT=u&#x27;\\ue00a&#x27;LEFT_CONTROL=u&#x27;\\ue009&#x27;LEFT_SHIFT=u&#x27;\\ue008&#x27;META=u&#x27;\\ue03d&#x27;MULTIPLY=u&#x27;\\ue024&#x27;NULL=u&#x27;\\ue000&#x27;NUMPAD0=u&#x27;\\ue01a&#x27;NUMPAD1=u&#x27;\\ue01b&#x27;NUMPAD2=u&#x27;\\ue01c&#x27;NUMPAD3=u&#x27;\\ue01d&#x27;NUMPAD4=u&#x27;\\ue01e&#x27;NUMPAD5=u&#x27;\\ue01f&#x27;NUMPAD6=u&#x27;\\ue020&#x27;NUMPAD7=u&#x27;\\ue021&#x27;NUMPAD8=u&#x27;\\ue022&#x27;NUMPAD9=u&#x27;\\ue023&#x27;PAGE_DOWN=u&#x27;\\ue00f&#x27;PAGE_UP=u&#x27;\\ue00e&#x27;PAUSE=u&#x27;\\ue00b&#x27;RETURN=u&#x27;\\ue006&#x27;RIGHT=u&#x27;\\ue014&#x27;SEMICOLON=u&#x27;\\ue018&#x27;SEPARATOR=u&#x27;\\ue026&#x27;SHIFT=u&#x27;\\ue008&#x27;SPACE=u&#x27;\\ue00d&#x27;SUBTRACT=u&#x27;\\ue027&#x27;TAB=u&#x27;\\ue004&#x27;UP=u&#x27;\\ue013&#x27;"}, "md/selenium/webdriver/common/touch_actions.html": {"url": "md/selenium/webdriver/common/touch_actions.html", "title": "selenium.webdriver.common.touch_actions", "keywords": "", "body": "selenium.webdriver.common.touch_actionsTouchActions实现1.classselenium.webdriver.common.touch_actions.TouchActions(driver)生成触摸操作。与ActionChains一样工作；操作存储在TouchActions对象中，并使用perform()触发。1.1.TouchActions(driver)创建一个新的TouchActions对象。参数：driver:执行用户操作的WebDriver实例。应该启用触摸屏。1.2.double_tap(on_element)双击特定元素。参数：on_element:要点按的元素。1.3.flick(xspeed,yspeed)轻弹，从屏幕上的任何地方开始。参数：xspeed:X轴速度，以每秒像素为单位。yspeed:Y轴速度，以每秒像素为单位。1.4.flick_element(on_element,xoffset,yoffset,speed)从on_element开始轻弹，然后以指定的速度移动xoffset和yoffset。参数：on_element:Flick将从元素的中心开始。xoffset:X轴偏移量yoffset:Y轴偏移量speed:每秒点击像素1.5.long_press(on_element)长按一个元素。参数：on_element:长按的元素1.6.move(xcoord,ycoord)将保持点击移动到指定位置。参数：xcoord:X轴坐标ycoord:Y轴坐标1.7.perform()执行所有存储的操作。1.8.release(xcoord,ycoord)在指定位置释放先前发出的tap和hold命令。参数：xcoord:X轴坐标ycoord:Y轴坐标1.9.scroll(xoffset,yoffset)触摸并滚动，向xoffset和yoffset移动。参数：xoffset:X轴偏移量yoffset:Y轴偏移量1.10.scroll_from_element(on_element,xoffset,yoffset)触摸并滚动从on_element开始，向xoffset和yoffset移动。参数：on_element:滚动开始的元素xoffset:X轴偏移量yoffset:Y轴偏移量1.11.tap(on_element)点击给定元素。参数：on_element:要点按的元素1.12.tap_and_hold(xcoord,ycoord)在给定坐标处按下并保持参数：xcoord:X轴坐标ycoord:Y轴坐标"}, "md/selenium/webdriver/common/utils.html": {"url": "md/selenium/webdriver/common/utils.html", "title": "selenium.webdriver.common.utils", "keywords": "", "body": "selenium.webdriver.common.utilsUtils实现。1.selenium.webdriver.common.utils.find_connectable_ip(host,port=None)将主机名解析为IP，优先选择IPv4地址。我们更喜欢IPv4，因此我们不会改变先前仅使用IPv4的实现的行为，并且因为某些驱动程序（例如，FirefoxDriver）不支持IPv6连接。如果提供了可选端口号，则仅考虑在给定端口上侦听的IP。参数：host-主机名port-可选端口号返回:单个IP地址，作为字符串。如果找到任何IPv4地址，则返回一个。否则，如果找到任何IPv6地址，则返回一个。如果不是，则返回None。2.selenium.webdriver.common.utils.free_port()使用套接字确定空闲端口。3.selenium.webdriver.common.utils.is_connectable(port,host='localhost')尝试在端口连接到服务器以查看它是否正在运行。参数：port-要连接的端口4.selenium.webdriver.common.utils.is_url_connectable(port)尝试在/status路径和指定端口上连接到HTTP服务器，以查看它是否成功响应。参数：port-要连接的端口5.selenium.webdriver.common.utils.join_host_port(host,port)一起加入主机名和端口。这是一个旨在处理IPv6文本的最小实现。例如，_join_host_port(&#x27;::1&#x27;,80)==&#x27;[::1]:80&#x27;.参数：host-主机名port-端口号6.selenium.webdriver.common.utils.keys_to_typing(value)处理将在元素中键入的值"}, "md/selenium/webdriver/common/proxy.html": {"url": "md/selenium/webdriver/common/proxy.html", "title": "selenium.webdriver.common.proxy", "keywords": "", "body": "selenium.webdriver.common.proxyProxy实现。1.classselenium.webdriver.common.proxy.Proxy(raw=None)代理包含有关代理类型和设置代理的必要信息。1.1.Proxy(raw=None)创建一个新的代理。参数：raw:原始代理数据。如果为None，则使用默认类值。1.2.add_to_capabilities(capabilities)在指定能力中添加代理信息。参数：capabilities:添加代理的能力1.3.auto_detect返回自动检测设置。1.4.autodetect=False设置自动检测设置为False。1.5.ftpProxy=''设置FTP代理1.6.ftp_proxy返回FTP代理设置1.7.httpProxy=''设置HTTP代理1.8.http_proxy返回HTTP代理设置1.9.noProxy=''设置noproxy代理1.10.no_proxy返回noproxy代理设置1.11.proxyAutoconfigUrl=''设置autoconfigurl代理1.12.proxy_autoconfig_url返回autoconfigurl代理设置1.13.proxyType={'string':'UNSPECIFIED','ff_value':6}设置代理类型1.14.proxy_type返回代理类型ProxyType.1.15.socksPassword=''设置socks代理密码1.16.socksProxy=''设置socks代理1.17.socksUsername=''设置socks用户名1.18.socks_password返回socks代理密码1.19.socks_proxy返回socks代理设置1.20.socks_username返回socks代理用户名1.21.sslProxy=''设置https代理1.22.ssl_proxy返回https代理设置2.classselenium.webdriver.common.proxy.ProxyType一组代理类型集合每种代理类型都有2个属性：ff_value：Firefox配置文件首选项的值string：代理类型IDAUTODETECT={&#x27;string&#x27;:&#x27;AUTODETECT&#x27;,&#x27;ff_value&#x27;:4}DIRECT={&#x27;string&#x27;:&#x27;DIRECT&#x27;,&#x27;ff_value&#x27;:0}MANUAL={&#x27;string&#x27;:&#x27;MANUAL&#x27;,&#x27;ff_value&#x27;:1}PAC={&#x27;string&#x27;:&#x27;PAC&#x27;,&#x27;ff_value&#x27;:2}RESERVED_1={&#x27;string&#x27;:&#x27;RESERVED1&#x27;,&#x27;ff_value&#x27;:3}SYSTEM={&#x27;string&#x27;:&#x27;SYSTEM&#x27;,&#x27;ff_value&#x27;:5}UNSPECIFIED={&#x27;string&#x27;:&#x27;UNSPECIFIED&#x27;,&#x27;ff_value&#x27;:6}2.1.classmethodload(value)3.classselenium.webdriver.common.proxy.ProxyTypeFactory工厂代理类型3.1.staticmake(ff_value,string)"}, "md/selenium/webdriver/common/service.html": {"url": "md/selenium/webdriver/common/service.html", "title": "selenium.webdriver.common.service", "keywords": "", "body": "selenium.webdriver.common.service1.classselenium.webdriver.common.service.Service(executable,port=0,log_file=-3,env=None,start_error_message='')1.1.assert_process_still_running()1.2.command_line_args()1.3.is_connectable()1.4.send_remote_shutdown_command()1.5.service_url获取服务的URL1.6.start()启动服务异常情况：WebDriverException:在无法启动服务或无法连接到服务时引发1.7.stop()停止服务。"}, "md/selenium/webdriver/common/html5/application_cache.html": {"url": "md/selenium/webdriver/common/html5/application_cache.html", "title": "selenium.webdriver.common.html5.application_cache", "keywords": "", "body": "selenium.webdriver.common.html5.application_cacheApplicationCache实现1.classselenium.webdriver.common.html5.application_cache.ApplicationCache(driver)1.1.ApplicationCache(driver)创建一个新的AplicationCache.参数：driver:执行用户操作的WebDriver实例1.2.CHECKING=21.3.DOWNLOADING=31.4.IDLE=11.5.OBSOLETE=51.6.UNCACHED=01.7.UPDATE_READY=41.8.status返回应用程序缓存的当前状态。"}, "md/selenium/webdriver/support/abstract_event_listener.html": {"url": "md/selenium/webdriver/support/abstract_event_listener.html", "title": "selenium.webdriver.support.abstract_event_listener", "keywords": "", "body": "classselenium.webdriver.support.abstract_event_listener.AbstractEventListener事件侦听器必须完全或部分地子类化并实现它1.after_change_value_of(element,driver)2.after_click(element,driver)3.after_close(driver)4.after_execute_script(script,driver)5.after_find(by,value,driver)6.after_navigate_back(driver)7.after_navigate_forward(driver)8.after_navigate_to(url,driver)9.after_quit(driver)10.before_change_value_of(element,driver)11.before_click(element,driver)12.before_close(driver)13.before_execute_script(script,driver)¶14.before_find(by,value,driver)15.before_navigate_back(driver)16.before_navigate_forward(driver)17.before_navigate_to(url,driver)18.before_quit(driver)19.on_exception(exception,driver)"}, "md/selenium/webdriver/support/color.html": {"url": "md/selenium/webdriver/support/color.html", "title": "selenium.webdriver.support.color", "keywords": "", "body": "selenium.webdriver.support.color1.classselenium.webdriver.support.color.Color(red,green,blue,alpha=1)颜色转换类举例：fromselenium.webdriver.support.colorimportColorprint(Color.from_string(&#x27;#00ff33&#x27;).rgba)print(Color.from_string(&#x27;rgb(1,255,3)&#x27;).hex)print(Color.from_string(&#x27;blue&#x27;).rgba)1.1.staticfrom_string(str_)hexrgbrgba"}, "md/selenium/webdriver/support/event_firing_webdriver.html": {"url": "md/selenium/webdriver/support/event_firing_webdriver.html", "title": "selenium.webdriver.support.event_firing_webdriver", "keywords": "", "body": "selenium.webdriver.support.event_firing_webdriver1.classselenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver(driver,event_listener)WebDriver实例的包装器，支持触发事件1.1.EventFiringWebDriver(driver,event_listener)创建EventFiringWebDriver的新实例参数：driver:WebDriver实例event_listener:继承AbstractEventListener的实例举例：fromselenium.webdriverimportFirefoxfromselenium.webdriver.support.eventsimportEventFiringWebDriver,AbstractEventListenerclassMyListener(AbstractEventListener):defbefore_navigate_to(self,url,driver):print(&quot;Beforenavigateto%s&quot;%url)defafter_navigate_to(self,url,driver):print(&quot;Afternavigateto%s&quot;%url)driver=Firefox()ef_driver=EventFiringWebDriver(driver,MyListener())ef_driver.get(&quot;http://www.google.co.in/&quot;)1.2.back()1.3.close()1.4.execute_async_script(script,*args)1.5.execute_script(script,*args)1.6.find_element(by='id',value=None)1.7.find_element_by_class_name(name)1.8.find_element_by_css_selector(css_selector)1.9.find_element_by_id(id_)1.10.find_element_by_link_text(link_text)1.11.find_element_by_name(name)1.12.find_element_by_partial_link_text(link_text)1.13.find_element_by_tag_name(name)1.14.find_element_by_xpath(xpath)1.15.find_elements(by='id',value=None)1.16.find_elements_by_class_name(name)1.17.find_elements_by_css_selector(css_selector)1.18.find_elements_by_id(id_)1.19.find_elements_by_link_text(text)1.20.find_elements_by_name(name)1.21.find_elements_by_partial_link_text(link_text)1.22.find_elements_by_tag_name(name)1.23.find_elements_by_xpath(xpath)1.24.forward()1.25.get(url)1.26.quit()1.27.wrapped_driver返回EventsFiringWebDriver包装的WebDriver实例2.classselenium.webdriver.support.event_firing_webdriver.EventFiringWebElement(webelement,ef_driver)WebElement实例的包装器，支持触发事件2.1.EventFiringWebElement(webelement,ef_driver)创建EventFiringWebElement的新实例2.2.clear()2.3.click()2.4.find_element(by='id',value=None)2.5.find_element_by_class_name(name)2.6.find_element_by_css_selector(css_selector)2.7.find_element_by_id(id_)2.8.find_element_by_link_text(link_text)2.9.find_element_by_name(name)2.10.find_element_by_partial_link_text(link_text)2.11.find_element_by_tag_name(name)2.12.find_element_by_xpath(xpath)2.13.find_elements(by='id',value=None)2.14.find_elements_by_class_name(name)2.15.find_elements_by_css_selector(css_selector)2.16.find_elements_by_id(id_)2.17.find_elements_by_link_text(link_text)2.18.find_elements_by_name(name)2.19.find_elements_by_partial_link_text(link_text)2.20.find_elements_by_tag_name(name)2.21.find_elements_by_xpath(xpath)2.22.send_keys(*value)2.23.wrapped_element返回EventFiringWebElement包装的WebElement实例"}, "md/selenium/webdriver/support/expected_conditions.html": {"url": "md/selenium/webdriver/support/expected_conditions.html", "title": "selenium.webdriver.support.expected_conditions", "keywords": "", "body": "selenium.webdriver.support.expected_conditions1.classselenium.webdriver.support.expected_conditions.alert_is_present期待出现警告框2.classselenium.webdriver.support.expected_conditions.element_located_selection_state_to_be(locator,is_selected)期望定位元素并检查指定的选择状态是否处于该状态。locator：(by,path)的元组is_selected是一个布尔值3.classselenium.webdriver.support.expected_conditions.element_located_to_be_selected(locator)期望定位的元素已经被选择。locator：(by,path)的元组4.classselenium.webdriver.support.expected_conditions.element_selection_state_to_be(element,is_selected)期望给定元素是否被选择。element：WebElement对象is_selected：一个布尔值5.classselenium.webdriver.support.expected_conditions.element_to_be_clickable(locator)期望定位的元素是可见的并且已启用，可以单击它。locator：(by,path)的元组6.classselenium.webdriver.support.expected_conditions.element_to_be_selected(element)期望元素已经被选择。element：WebElement对象7.classselenium.webdriver.support.expected_conditions.frame_to_be_available_and_switch_to_it(locator)期望frame可切换，如果frame可用，则将driver切换到frame中。locator：(by,path)的元组8.classselenium.webdriver.support.expected_conditions.invisibility_of_element_located(locator)期望某个元素是不可见的，或者不在DOM上显示locator：(by,path)的元组9.classselenium.webdriver.support.expected_conditions.new_window_is_opened(current_handles)期望新窗口将被打开并使windows句柄数量增加10.classselenium.webdriver.support.expected_conditions.number_of_windows_to_be(num_windows)期望窗口数量是一个特定的值11.classselenium.webdriver.support.expected_conditions.presence_of_all_elements_located(locator)期望页面上至少存在一个指定元素，使用locator查找元素，一旦找到就返回WebElements列表。locator：(by,path)的元组12.classselenium.webdriver.support.expected_conditions.presence_of_element_located(locator)期望页面存在指定元素。这不一定意味着元素可见locator：(by,path)的元组13.classselenium.webdriver.support.expected_conditions.staleness_of(element)等待元素不再附加到DOM中，如果元素仍然附加在DOM中，则返回False，否则返回Trueelement：WebElement对象14.classselenium.webdriver.support.expected_conditions.text_to_be_present_in_element(locator,text_)期望文本出现在指定元素文本中locator：(by,path)的元组text_：期望文本15.classselenium.webdriver.support.expected_conditions.text_to_be_present_in_element_value(locator,text_)期望文本出现在指定元素value属性中locator：(by,path)的元组text_：期望文本16.classselenium.webdriver.support.expected_conditions.title_contains(title)期望标题包含指定字符串，区分大小写，如果标题匹配返回True，否则返回Falsetitle：标题片段字符串17.classselenium.webdriver.support.expected_conditions.title_is(title)期望标题为指定字符串，必须完全匹配，如果标题匹配返回True，否则返回Falsetitle：标题字符串18.classselenium.webdriver.support.expected_conditions.url_changes(url)期望当前url为预期url，区分大小写。如果匹配返回True，否则返回Falseurl：预期url19.classselenium.webdriver.support.expected_conditions.url_contains(url)期望当前url包含指定字符串，区分大小写。如果匹配返回True，否则返回Falseurl：预期url片段20.classselenium.webdriver.support.expected_conditions.url_matches(pattern)期望当前url完全符合正则表达式要求。如果匹配返回True，否则返回Falsepattern：url正则表达式21.classselenium.webdriver.support.expected_conditions.url_to_be(url)期望当前url不为预期url，区分大小写。如果不匹配返回True，否则返回False22.classselenium.webdriver.support.expected_conditions.visibility_of(element)期望页面DOM存在并可见指定元素，且高度与宽度大于0，一旦找到该元素即返回WebElementelement：WebElement对象23.classselenium.webdriver.support.expected_conditions.visibility_of_all_elements_located(locator)期望所有指定元素存在于页面DOM中并可见，且高度与宽度大于0，一旦找到该元素即返回WebElementlocator：(by,path)的元组24.classselenium.webdriver.support.expected_conditions.visibility_of_any_elements_located(locator)期望页面DOM至少存在一个并可见指定元素，且高度与宽度大于0，一旦找到该元素即返回WebElements列表locator：(by,path)的元组25.classselenium.webdriver.support.expected_conditions.visibility_of_element_located(locator)期望页面DOM存在并可见指定元素，且高度与宽度大于0，一旦找到该元素即返回WebElementlocator：(by,path)的元组"}, "md/selenium/webdriver/support/select.html": {"url": "md/selenium/webdriver/support/select.html", "title": "selenium.webdriver.support.select", "keywords": "", "body": "selenium.webdriver.support.select下拉框处理1.classselenium.webdriver.support.select.Select(webelement)构造函数。检查给定元素确实是SELECT标记。如果不是，则抛出UnexpectedTagNameException。参数webelement-elementSELECTelementtowrap举例：fromselenium.webdriver.support.uiimportSelectSelect(driver.find_element_by_tag_name(&quot;select&quot;)).select_by_index(2)1.1.all_selected_options返回属于此select标记的所有选定选项的列表1.2.deselect_all()清除所有选定的条目。这仅在SELECT支持多个选择时有效。throwsNotImplementedError如果SELECT不支持多个选择1.3.deselect_by_index(index)取消选择给定索引处的选项。这是通过检查元素的index属性来完成的，而不仅仅是通过计算。参数index-将取消选择此索引处的选项throwsNoSuchElementException如果SELECT中没有带特定索引的选项1.4.deselect_by_value(value)取消选择具有与参数匹配的值的所有选项。也就是说，当给出foo时，这将取消选择如下选项：&lt;optionvalue=&quot;foo&quot;&gt;Bar&lt;/option&gt;参数value-要匹配的值throwsNoSuchElementException如果SELECT中没有带有特定值的选项1.5.deselect_by_visible_text(text)取消选择显示与参数匹配的文本的所有选项。也就是说，当给出Bar时，这将取消选择如下选项&lt;optionvalue=&quot;foo&quot;&gt;Bar&lt;/option&gt;参数text-要匹配的可见文本1.6.first_selected_option此选择标记中的第一个选定选项（或正常选择中当前选定的选项）1.7.options返回属于此select标记的所有选项的列表1.8.select_by_index(index)选择给定索引处的选项。这是通过检查元素的index属性来完成的，而不仅仅是通过计算。参数index-将选择此索引处的选项throwsNoSuchElementException如果SELECT中没有带特定索引的选项1.9.select_by_value(value)选择具有与参数匹配的值的所有选项。也就是说，当给出foo时，这将选择如下选项：&lt;optionvalue=&quot;foo&quot;&gt;Bar&lt;/option&gt;参数value-要匹配的值throwsNoSuchElementException如果SELECT中没有带有特定值的选项1.10.select_by_visible_text(text)选择显示与参数匹配的文本的所有选项。也就是说，当给出Bar时，这将选择如下选项：&lt;optionvalue=&quot;foo&quot;&gt;Bar&lt;/option&gt;参数text-要匹配的可见文本throwsNoSuchElementException如果SELECT中没有带有特定文本的选项"}, "md/selenium/webdriver/support/wait.html": {"url": "md/selenium/webdriver/support/wait.html", "title": "selenium.webdriver.support.wait", "keywords": "", "body": "selenium.webdriver.support.wait1.classselenium.webdriver.support.wait.WebDriverWait(driver,timeout,poll_frequency=0.5,ignored_exceptions=None)构造函数，获取WebDriver实例并在几秒钟内超时。参数：driver-WebDriver的实例(Ie,Firefox,ChromeorRemote)timeout-超时前的秒数poll_frequency-调用之间的休眠间隔默认情况下，为0.5秒ignored_exceptions-在调用期间忽略的异常类的可迭代结构。默认情况下，它仅包含NoSuchElementException。举例：fromselenium.webdriver.support.uiimportWebDriverWaitelement=WebDriverWait(driver,10).until(lambdax:x.find_element_by_id(&quot;someId&quot;))is_disappeared=WebDriverWait(driver,30,1,(ElementNotVisibleException)).until_not(lambdax:x.find_element_by_id(&quot;someId&quot;).is_displayed())1.1.until(method,message='')将驱动程序提供的方法作为参数调用，直到返回值不为False。1.2.until_not(method,message='')将驱动程序提供的方法作为参数调用，直到返回值为False。"}, "md/selenium/webdriver/android/webdriver.html": {"url": "md/selenium/webdriver/android/webdriver.html", "title": "selenium.webdriver.android.webdriver", "keywords": "", "body": "selenium.webdriver.android.webdriver1.classselenium.webdriver.android.webdriver.WebDriver(host='localhost',port=4444,desired_capabilities={'version':'','browserName':'android','platform':'ANDROID'})简单的RemoteWebDriver包装器开始连接到Selendroid的WebView应用程序有关Selendroidhttp://selendroid.io/mobileWeb.html使用WebView应用程序创建Selendroid的新实例参数：host-selendroid运行位置port-selendroid正在运行的端口desired_capabilities:具有功能的Dictionary对象"}, "md/selenium/webdriver/chrome/options.html": {"url": "md/selenium/webdriver/chrome/options.html", "title": "selenium.webdriver.chrome.options", "keywords": "", "body": "selenium.webdriver.chrome.options1.classselenium.webdriver.chrome.options.Options1.1.KEY='goog:chromeOptions'1.2.add_argument(argument)向列表添加参数参数：argument：设置参数1.3.add_encoded_extension(extension)将带有Base64编码字符串添加到扩展数据，该列表将用于将其提取到ChromeDriver参数：extension:带有扩展数据的Base64编码字符串1.4.add_experimental_option(name,value)添加传递给chrome的实验选项。参数：name:实验选项名称value:选项值1.5.add_extension(extension)将扩展路径添加到列表中，该列表将用于将其提取到ChromeDriver参数：extension:*.crx文件路径1.6.arguments返回浏览器所需的参数列表1.7.binary_location返回二进制文件的位置，否则返回空字符串1.8.debugger_address返回远程devtools实例的地址1.9.experimental_options返回chrome的实验选项字典1.10.extensions返回将加载到chrome中的已编码扩展名列表1.11.headless返回是否设置了无头参数1.12.set_headless(headless=True)不推荐使用，options.headless=True1.13.to_capabilities()使用已设置的所有选项创建功能返回包含所有内容的字典"}, "md/selenium/webdriver/chrome/service.html": {"url": "md/selenium/webdriver/chrome/service.html", "title": "selenium.webdriver.chrome.service", "keywords": "", "body": "selenium.webdriver.chrome.service1.classselenium.webdriver.chrome.service.Service(executable_path,port=0,service_args=None,log_path=None,env=None)管理ChromeDriver启动和停止的对象创建服务的新实例参数：executable_path:ChromeDriver的路径port:服务正在运行的端口service_args:传递给chromedriver服务的args列表log_path:要登录的chromedriver服务的路径1.1.command_line_args()"}, "md/selenium/webdriver/chrome/webdriver.html": {"url": "md/selenium/webdriver/chrome/webdriver.html", "title": "selenium.webdriver.chrome.webdriver", "keywords": "", "body": "selenium.webdriver.chrome.webdriver1.classselenium.webdriver.chrome.webdriver.WebDriver(executable_path='chromedriver',port=0,options=None,service_args=None,desired_capabilities=None,service_log_path=None,chrome_options=None)控制ChromeDriver操作浏览器1.1.WebDriver(executable_path='chromedriver',port=0,options=None,service_args=None,desired_capabilities=None,service_log_path=None,chrome_options=None)创建chrome驱动程序的新实例启动该服务，然后创建新的chrome驱动程序实例。参数：executable_path-可执行文件的路径。如果使用默认值，则假定可执行文件位于$PATHport-希望服务运行的端口，如果保留为0，将找到一个空闲端口desired_capabilities:仅具有非浏览器特定功能的Dictionary对象，例如proxy或loggingPref。options:这需要ChromeOptions的一个实例1.2.create_options()1.3.execute_cdp_cmd(cmd,cmd_args)执行ChromeDevtoolsProtocol命令并获取返回的结果命令和命令args应遵循chromedevtools协议domains/commands，请参阅链接https://chromedevtools.github.io/devtools-protocol/参数：cmd:命令名称cmd_args:一个字典。如果没有cmd_args，则清空dict{}用法：driver.execute_cdp_cmd(&#x27;Network.getResponseBody&#x27;,{&#x27;requestId&#x27;:requestId})返回值：如果没有结果返回，则为dict，空dict{}。例如getResponseBody:{&#x27;base64Encoded&#x27;:False,&#x27;body&#x27;:&#x27;responsebodystring&#x27;}1.4.get_network_conditions()获取Chrome网络仿真设置返回值：一个字典。例如：{&#x27;latency&#x27;:4,&#x27;download_throughput&#x27;:2,&#x27;upload_throughput&#x27;:2,&#x27;offline&#x27;:False}1.5.launch_app(id)启动ID指定的Chrome应用1.6.quit()关闭浏览器并关闭启动ChromeDriver时启动的ChromeDriver可执行文件1.7.set_network_conditions(**network_conditions)设置Chrome网络仿真设置参数：network_conditions:具有条件规范的字典用法：driver.set_network_conditions(offline=False,latency=5,#额外的延迟(ms)download_throughput=500*1024,#最大吞吐量upload_throughput=500*1024)#最大吞吐量Note:'throughput'可用于设置上传和下载。"}, "md/selenium/webdriver/firefox/extension_connection.html": {"url": "md/selenium/webdriver/firefox/extension_connection.html", "title": "selenium.webdriver.firefox.extension_connection", "keywords": "", "body": "selenium.webdriver.firefox.extension_connection1.classselenium.webdriver.firefox.extension_connection.ExtensionConnection(host,firefox_profile,firefox_binary=None,timeout=30)1.1.connect()连接到扩展并检索sessionid.1.2.classmethodconnect_and_quit()连接到正在运行的浏览器并立即退出。1.3.classmethodis_connectable()尝试连接到扩展但不检索上下文。1.4.quit(sessionId=None)2.exceptionselenium.webdriver.firefox.extension_connection.ExtensionConnectionError扩展中发生内部错误。可能是由于输入错误或webdriver中的错误引起的"}, "md/selenium/webdriver/firefox/firefox_binary.html": {"url": "md/selenium/webdriver/firefox/firefox_binary.html", "title": "selenium.webdriver.firefox.firefox_binary", "keywords": "", "body": "selenium.webdriver.firefox.firefox_binary1.classselenium.webdriver.firefox.firefox_binary.FirefoxBinary(firefox_path=None,log_file=None)创建Firefox二进制文件的新实例。参数：firefox_path-Firefox可执行文件的路径。默认情况下，它将从标准位置检测到。log_file-用于将firefox进程输出重定向到的文件对象。它可以是sys.stdout。请注意，并行运行时输出不会同步。默认情况下，它将重定向到/dev/null.1.1.NO_FOCUS_LIBRARY_NAME='x_ignore_nofocus.so'1.2.add_command_line_options(*args)1.3.kill()杀死浏览器。这在浏览器卡住时很有用。1.4.launch_browser(profile,timeout=30)启动给定配置文件名称的浏览器。假设配置文件已存在。1.5.which(fname)通过搜索给定名称的Path返回完全限定的路径"}, "md/selenium/webdriver/firefox/options.html": {"url": "md/selenium/webdriver/firefox/options.html", "title": "selenium.webdriver.firefox.options", "keywords": "", "body": "selenium.webdriver.firefox.options1.classselenium.webdriver.firefox.options.Log1.1.to_capabilities()2.classselenium.webdriver.firefox.options.Options2.1.KEY='moz:firefoxOptions'2.2.add_argument(argument)添加要用于浏览器进程的参数。2.3.arguments返回浏览器进程参数列表。2.4.binary返回FirefoxBinary实例2.5.binary_location返回二进制文件的位置。2.6.headless返回是否设置了无头的参数2.7.preferences返回首选项的字典。2.8.profile返回要使用的Firefox配置文件。2.9.proxy如果没有设置，则返回代理。2.10.set_headless(headless=True)不推荐使用，options.headless=True2.11.set_preference(name,value)设置首选项。2.12.to_capabilities()将Firefox选项编组为moz:firefoxOptions对象。"}, "md/selenium/webdriver/firefox/firefox_profile.html": {"url": "md/selenium/webdriver/firefox/firefox_profile.html", "title": "selenium.webdriver.firefox.firefox_profile", "keywords": "", "body": "selenium.webdriver.firefox.firefox_profile1.exceptionselenium.webdriver.firefox.firefox_profile.AddonFormatError非格式良好的附加配置文件的异常2.classselenium.webdriver.firefox.firefox_profile.FirefoxProfile(profile_directory=None)初始化Firefox配置文件的新实例参数：profile_directory:您要使用的配置文件的目录。默认为None，并在创建对象时创建新目录。2.1.ANONYMOUS_PROFILE_NAME='WEBDRIVER_ANONYMOUS_PROFILE'2.2.DEFAULT_PREFERENCES=None2.3.accept_untrusted_certs2.4.add_extension(extension='webdriver.xpi')2.5.assume_untrusted_cert_issuer2.6.encoded用于远程WebDriverJSON有线协议的压缩的base64编码的配置文件目录字符串2.7.native_events_enabled2.8.path获取当前正在使用的配置文件目录2.9.port获取WebDriver正在处理的端口2.10.set_preference(key,value)在配置文件中设置我们想要的首选项。2.11.set_proxy(proxy)2.12.update_preferences()"}, "md/selenium/webdriver/firefox/webdriver.html": {"url": "md/selenium/webdriver/firefox/webdriver.html", "title": "selenium.webdriver.firefox.webdriver", "keywords": "", "body": "selenium.webdriver.firefox.webdriver1.classselenium.webdriver.firefox.webdriver.WebDriver(firefox_profile=None,firefox_binary=None,timeout=30,capabilities=None,proxy=None,executable_path='geckodriver',options=None,log_path='geckodriver.log',firefox_options=None,service_args=None,desired_capabilities=None)启动Firefox的新本地会话。基于各种关键字参数的组合和特异性，将构造一个传递给远程端的能力字典。给予此构造函数的关键字参数是帮助程序，可以更轻松地使用不同的选项自定义FirefoxWebDriver会话。它们映射到传递到远程端的功能字典。由于某些选项（例如firefox_profile和options.profile是互斥的），因此优先级取决于设置的具体程度。capabilities是最不具体的关键字参数，后跟options，后跟firefox_binary和firefox_profile。实际上，这意味着如果同时设置了firefox_profile和options.profile，则所选的配置文件实例将始终来自最具体的变量。在这种情况下，这将是firefox_profile。这将导致options.profile被忽略，因为它被认为是比顶级firefox_profile关键字参数更不具体的设置。类似地，如果你指定了一个[&quot;moz:firefoxOptions&quot;](&quot;profile&quot;)Base64字符串，这将排在options.profile之下。参数：firefox_profile-FirefoxProfile对象的实例或字符串。如果未定义，将在系统上的临时位置创建新的配置文件。firefox_binary-的实例FirefoxBinary或完整路径Firefox的二进制文件。如果未定义，将使用系统默认的Firefox安装。timeout-使用扩展连接时等待Firefox启动的时间。capabilities-所需能力的词典。proxy-通过扩展连接与Firefox通信时的代理设置。executable_path-覆盖用于Firefox47.0.1及更高版本的geckodriver二进制文件的完整路径，默认为从系统路径中获取二进制文件。options-options.Options的实例。log_path-从驱动程序记录信息的位置。desired_capabilities-功能的别名。在此库的未来版本中，这将取代capabilities。这将使签名与RemoteWebDriver保持一致。1.1.CONTEXT_CHROME='chrome'1.2.CONTEXT_CONTENT='content'1.3.NATIVE_EVENTS_ALLOWED=False1.4.context(*args,**kwds)使用with语句设置Selenium命令运行的上下文。服务器上下文的状态在进入块之前保存，并在退出时恢复。参数：context–Context，可以是类属性CONTEXT_CHROME或CONTEXT_CONTENT之一。用法示例：withselenium.context(selenium.CONTEXT_CHROME):#chromescope...dostuff...1.5.firefox_profile1.6.install_addon(path,temporary=None)安装Firefox插件。返回已安装插件的标识符。此标识符以后可用于卸载插件。参数：path–要安装的插件的绝对路径。用法：driver.install_addon(&#x27;/path/to/firebug.xpi&#x27;)1.7.quit()退出驱动程序并关闭每个关联的窗口。1.8.set_context(context)1.9.uninstall_addon(identifier)使用其标识符卸载Firefox插件。用法：driver.uninstall_addon(&#x27;addon@foo.com&#x27;)"}, "md/selenium/webdriver/ie/webdriver.html": {"url": "md/selenium/webdriver/ie/webdriver.html", "title": "selenium.webdriver.ie.webdriver", "keywords": "", "body": "selenium.webdriver.ie.webdriver1.classselenium.webdriver.ie.webdriver.WebDriver(executable_path='IEDriverServer.exe',capabilities=None,port=0,timeout=30,host=None,log_level=None,log_file=None,options=None,ie_options=None,desired_capabilities=None)控制IEServerDriver并允许您驱动InternetExplorer创建IE驱动程序的新实例。启动该服务，然后创建新的IE驱动程序实例。参数：executable_path-可执行文件的路径。如果使用默认值，则假定可执行文件位于$PATHcapabilities:capabilitiesDictionary对象port-希望服务运行的端口，如果保留为0，将找到一个空闲端口。log_level-您希望服务运行的日志级别。log_file-您希望服务登录的日志文件。options：IEOptions实例，提供额外的IE选项desired_capabilities：能力的别名；这将使签名与RemoteWebDriver一致。1.1.create_options()1.2.quit()"}, "md/selenium/webdriver/opera/webdriver.html": {"url": "md/selenium/webdriver/opera/webdriver.html", "title": "selenium.webdriver.opera.webdriver", "keywords": "", "body": "selenium.webdriver.opera.webdriver1.classselenium.webdriver.opera.webdriver.OperaDriver(executable_path=None,port=0,options=None,service_args=None,desired_capabilities=None,service_log_path=None,opera_options=None)控制新的OperaDriver并允许您基于Chromium驱动Opera浏览器。创建operadriver的新实例。启动该服务，然后创建operadriver的新实例。参数：executable_path-可执行文件的路径。如果使用默认值，它假定可执行文件位于$PATHport-希望服务运行的端口，如果保留为0，将找到一个空闲端口。desired_capabilities:仅具有非浏览器特定功能的Dictionary对象，例如proxy或loggingPref。options:这需要ChromeOptions的一个实例1.1.create_options()2.classselenium.webdriver.opera.webdriver.WebDriver(desired_capabilities=None,executable_path=None,port=0,service_log_path=None,service_args=None,options=None)2.1.classServiceType2.1.1.CHROMIUM=2"}, "md/selenium/webdriver/phantomjs/service.html": {"url": "md/selenium/webdriver/phantomjs/service.html", "title": "selenium.webdriver.phantomjs.service", "keywords": "", "body": "selenium.webdriver.phantomjs.service1.classselenium.webdriver.phantomjs.service.Service(executable_path,port=0,service_args=None,log_path=None)管理PhantomJS/Ghostdriver启动和停止的对象创建服务的新实例参数：executable_path：PhantomJS二进制文件的路径port：服务正在运行的端口service_args：传递给PhantomJS的其他命令行选项的列表log_path：PhantomJS服务登录的路径1.1.command_line_args()¶1.2.send_remote_shutdown_command()1.3.service_url获取GhostDriver服务的url"}, "md/selenium/webdriver/phantomjs/webdriver.html": {"url": "md/selenium/webdriver/phantomjs/webdriver.html", "title": "selenium.webdriver.phantomjs.webdriver", "keywords": "", "body": "selenium.webdriver.phantomjs.webdriver1.classselenium.webdriver.phantomjs.webdriver.WebDriver(executable_path='phantomjs',port=0,desired_capabilities={'version':'','browserName':'phantomjs','javascriptEnabled':True,'platform':'ANY'},service_args=None,service_log_path=None)包装器通过Ghostdriver与PhantomJS通信。您需要按照此处的所有说明操作：https://github.com/detro/ghostdriver创建PhantomJS/Ghostdriver的新实例。启动该服务，然后创建驱动程序的新实例。参数：executable_path-可执行文件的路径。如果使用默认值，则假定可执行文件位于$PATH中port-您希望服务运行的端口，如果保留为0，将找到一个空闲端口。desired_capabilities：仅具有非浏览器特定功能的Dictionary对象，例如proxy或loggingPref。service_args：传递给PhantomJS的命令行参数列表service_log_path：要登录的phantomjs服务的路径。1.1.quit()关闭浏览器并关闭启动PhantomJS时启动的PhantomJS可执行文件"}, "md/selenium/webdriver/remote/command.html": {"url": "md/selenium/webdriver/remote/command.html", "title": "selenium.webdriver.remote.command", "keywords": "", "body": "selenium.webdriver.remote.command1.classselenium.webdriver.remote.command.Command定义标准WebDriver命令的常量。虽然这些常量本身没有任何意义，但它们用于通过实现WebDriver远程线协议的服务来编组命令：https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol1.1.ACCEPT_ALERT='acceptAlert'1.2.ADD_COOKIE='addCookie'1.3.CLEAR_APP_CACHE='clearAppCache'1.4.CLEAR_ELEMENT='clearElement'1.5.CLEAR_LOCAL_STORAGE='clearLocalStorage'1.6.CLEAR_SESSION_STORAGE='clearSessionStorage'¶1.7.CLICK='mouseClick'1.8.CLICK_ELEMENT='clickElement'1.9.CLOSE='close'1.10.CONTEXT_HANDLES='getContextHandles'1.11.CURRENT_CONTEXT_HANDLE='getCurrentContextHandle'1.12.DELETE_ALL_COOKIES='deleteAllCookies'1.13.DELETE_COOKIE='deleteCookie'1.14.DELETE_SESSION='deleteSession'1.15.DISMISS_ALERT='dismissAlert'1.16.DOUBLE_CLICK='mouseDoubleClick'1.17.DOUBLE_TAP='touchDoubleTap'1.18.ELEMENT_EQUALS='elementEquals'1.19.ELEMENT_SCREENSHOT='elementScreenshot'1.20.EXECUTE_ASYNC_SCRIPT='executeAsyncScript'1.21.EXECUTE_SCRIPT='executeScript'1.22.EXECUTE_SQL='executeSql'1.23.FIND_CHILD_ELEMENT='findChildElement'1.24.FIND_CHILD_ELEMENTS='findChildElements'1.25.FIND_ELEMENT='findElement'1.26.FIND_ELEMENTS='findElements'1.27.FLICK='touchFlick'1.28.FULLSCREEN_WINDOW='fullscreenWindow'1.29.GET='get'1.30.GET_ACTIVE_ELEMENT='getActiveElement'1.31.GET_ALERT_TEXT='getAlertText'1.32.GET_ALL_COOKIES='getCookies'1.33.GET_ALL_SESSIONS='getAllSessions'1.34.GET_APP_CACHE='getAppCache'1.35.GET_APP_CACHE_STATUS='getAppCacheStatus'1.36.GET_AVAILABLE_LOG_TYPES='getAvailableLogTypes'1.37.GET_COOKIE='getCookie'1.38.GET_CURRENT_URL='getCurrentUrl'1.39.GET_CURRENT_WINDOW_HANDLE='getCurrentWindowHandle'1.40.GET_ELEMENT_ATTRIBUTE='getElementAttribute'1.41.GET_ELEMENT_LOCATION='getElementLocation'1.42.GET_ELEMENT_LOCATION_ONCE_SCROLLED_INTO_VIEW='getElementLocationOnceScrolledIntoView'1.43.GET_ELEMENT_PROPERTY='getElementProperty'1.44.GET_ELEMENT_RECT='getElementRect'1.45.GET_ELEMENT_SIZE='getElementSize'1.46.GET_ELEMENT_TAG_NAME='getElementTagName'1.47.GET_ELEMENT_TEXT='getElementText'1.48.GET_ELEMENT_VALUE='getElementValue'1.49.GET_ELEMENT_VALUE_OF_CSS_PROPERTY='getElementValueOfCssProperty'1.50.GET_LOCAL_STORAGE_ITEM='getLocalStorageItem'1.51.GET_LOCAL_STORAGE_KEYS='getLocalStorageKeys'1.52.GET_LOCAL_STORAGE_SIZE='getLocalStorageSize'1.53.GET_LOCATION='getLocation'1.54.GET_LOG='getLog'1.55.GET_NETWORK_CONNECTION='getNetworkConnection'1.56.GET_PAGE_SOURCE='getPageSource'1.57.GET_SCREEN_ORIENTATION='getScreenOrientation'1.58.GET_SESSION_STORAGE_ITEM='getSessionStorageItem'1.59.GET_SESSION_STORAGE_KEYS='getSessionStorageKeys'1.60.GET_SESSION_STORAGE_SIZE='getSessionStorageSize'1.61.GET_TITLE='getTitle'1.62.GET_WINDOW_HANDLES='getWindowHandles'1.63.GET_WINDOW_POSITION='getWindowPosition'1.64.GET_WINDOW_RECT='getWindowRect'1.65.GET_WINDOW_SIZE='getWindowSize'1.66.GO_BACK='goBack'1.67.GO_FORWARD='goForward'1.68.IMPLICIT_WAIT='implicitlyWait'1.69.IS_ELEMENT_DISPLAYED='isElementDisplayed'1.70.IS_ELEMENT_ENABLED='isElementEnabled'1.71.IS_ELEMENT_SELECTED='isElementSelected'1.72.LONG_PRESS='touchLongPress'1.73.MAXIMIZE_WINDOW='windowMaximize'1.74.MINIMIZE_WINDOW='minimizeWindow'1.75.MOUSE_DOWN='mouseButtonDown'1.76.MOUSE_UP='mouseButtonUp'1.77.MOVE_TO='mouseMoveTo'1.78.NEW_SESSION='newSession'1.79.QUIT='quit'1.80.REFRESH='refresh'1.81.REMOVE_LOCAL_STORAGE_ITEM='removeLocalStorageItem'1.82.REMOVE_SESSION_STORAGE_ITEM='removeSessionStorageItem'1.83.SCREENSHOT='screenshot'1.84.SEND_KEYS_TO_ACTIVE_ELEMENT='sendKeysToActiveElement'1.85.SEND_KEYS_TO_ELEMENT='sendKeysToElement'1.86.SET_ALERT_CREDENTIALS='setAlertCredentials'1.87.SET_ALERT_VALUE='setAlertValue'1.88.SET_ELEMENT_SELECTED='setElementSelected'1.89.SET_LOCAL_STORAGE_ITEM='setLocalStorageItem'1.90.SET_LOCATION='setLocation'1.91.SET_NETWORK_CONNECTION='setNetworkConnection'1.92.SET_SCREEN_ORIENTATION='setScreenOrientation'1.93.SET_SCRIPT_TIMEOUT='setScriptTimeout'1.94.SET_SESSION_STORAGE_ITEM='setSessionStorageItem'1.95.SET_TIMEOUTS='setTimeouts'1.96.SET_WINDOW_POSITION='setWindowPosition'1.97.SET_WINDOW_RECT='setWindowRect'1.98.SET_WINDOW_SIZE='setWindowSize'1.99.SINGLE_TAP='touchSingleTap'1.100.STATUS='status'1.101.SUBMIT_ELEMENT='submitElement'1.102.SWITCH_TO_CONTEXT='switchToContext'1.103.SWITCH_TO_FRAME='switchToFrame'1.104.SWITCH_TO_PARENT_FRAME='switchToParentFrame'1.105.SWITCH_TO_WINDOW='switchToWindow'1.106.TOUCH_DOWN='touchDown'1.107.TOUCH_MOVE='touchMove'1.108.TOUCH_SCROLL='touchScroll'1.109.TOUCH_UP='touchUp'1.110.UPLOAD_FILE='uploadFile'1.111.W3C_ACCEPT_ALERT='w3cAcceptAlert'1.112.W3C_ACTIONS='actions'1.113.W3C_CLEAR_ACTIONS='clearActionState'1.114.W3C_DISMISS_ALERT='w3cDismissAlert'1.115.W3C_EXECUTE_SCRIPT='w3cExecuteScript'1.116.W3C_EXECUTE_SCRIPT_ASYNC='w3cExecuteScriptAsync'1.117.W3C_GET_ACTIVE_ELEMENT='w3cGetActiveElement'1.118.W3C_GET_ALERT_TEXT='w3cGetAlertText'1.119.W3C_GET_CURRENT_WINDOW_HANDLE='w3cGetCurrentWindowHandle'1.120.W3C_GET_WINDOW_HANDLES='w3cGetWindowHandles'1.121.W3C_GET_WINDOW_POSITION='w3cGetWindowPosition'1.122.W3C_GET_WINDOW_SIZE='w3cGetWindowSize'1.123.W3C_MAXIMIZE_WINDOW='w3cMaximizeWindow'1.124.W3C_SET_ALERT_VALUE='w3cSetAlertValue'1.125.W3C_SET_WINDOW_POSITION='w3cSetWindowPosition'1.126.W3C_SET_WINDOW_SIZE='w3cSetWindowSize'"}, "md/selenium/webdriver/remote/errorhandler.html": {"url": "md/selenium/webdriver/remote/errorhandler.html", "title": "selenium.webdriver.remote.errorhandler", "keywords": "", "body": "selenium.webdriver.remote.errorhandler1.classselenium.webdriver.remote.errorhandler.ErrorCodeWebDriver有线协议中定义的错误代码。1.1.ELEMENT_CLICK_INTERCEPTED=[64,'elementclickintercepted']1.2.ELEMENT_IS_NOT_SELECTABLE=[15,'elementnotselectable']1.3.ELEMENT_NOT_INTERACTABLE=[60,'elementnotinteractable']1.4.ELEMENT_NOT_VISIBLE=[11,'elementnotvisible']¶1.5.IME_ENGINE_ACTIVATION_FAILED=[31,'imeengineactivationfailed']1.6.IME_NOT_AVAILABLE=[30,'imenotavailable']1.7.INSECURE_CERTIFICATE=['insecurecertificate']1.8.INVALID_ARGUMENT=[61,'invalidargument']1.9.INVALID_COOKIE_DOMAIN=[24,'invalidcookiedomain']1.10.INVALID_COORDINATES=['invalidcoordinates']1.11.INVALID_ELEMENT_COORDINATES=[29,'invalidelementcoordinates']1.12.INVALID_ELEMENT_STATE=[12,'invalidelementstate']1.13.INVALID_SELECTOR=[32,'invalidselector']1.14.INVALID_SESSION_ID=['invalidsessionid']1.15.INVALID_XPATH_SELECTOR=[51,'invalidselector']1.16.INVALID_XPATH_SELECTOR_RETURN_TYPER=[52,'invalidselector']1.17.JAVASCRIPT_ERROR=[17,'javascripterror']1.18.METHOD_NOT_ALLOWED=[405,'unsupportedoperation']1.19.MOVE_TARGET_OUT_OF_BOUNDS=[34,'movetargetoutofbounds']1.20.NO_ALERT_OPEN=[27,'nosuchalert']1.21.NO_SUCH_COOKIE=[62,'nosuchcookie']1.22.NO_SUCH_ELEMENT=[7,'nosuchelement']1.23.NO_SUCH_FRAME=[8,'nosuchframe']1.24.NO_SUCH_WINDOW=[23,'nosuchwindow']1.25.SCRIPT_TIMEOUT=[28,'scripttimeout']1.26.SESSION_NOT_CREATED=[33,'sessionnotcreated']1.27.STALE_ELEMENT_REFERENCE=[10,'staleelementreference']1.28.SUCCESS=01.29.TIMEOUT=[21,'timeout']1.30.UNABLE_TO_CAPTURE_SCREEN=[63,'unabletocapturescreen']1.31.UNABLE_TO_SET_COOKIE=[25,'unabletosetcookie']1.32.UNEXPECTED_ALERT_OPEN=[26,'unexpectedalertopen']1.33.UNKNOWN_COMMAND=[9,'unknowncommand']1.34.UNKNOWN_ERROR=[13,'unknownerror']1.35.UNKNOWN_METHOD=['unknownmethodexception']1.36.XPATH_LOOKUP_ERROR=[19,'invalidselector']2.classselenium.webdriver.remote.errorhandler.ErrorHandler处理WebDriver服务器返回的错误。2.1.check_response(response)检查来自WebDriver的JSON响应是否没有错误。参数：response-来自WebDriver服务器的JSON响应，作为字典对象。Raises：如果响应包含错误消息。"}, "md/selenium/webdriver/remote/mobile.html": {"url": "md/selenium/webdriver/remote/mobile.html", "title": "selenium.webdriver.remote.mobile", "keywords": "", "body": "selenium.webdriver.remote.mobile1.classselenium.webdriver.remote.mobile.Mobile(driver)1.1.AIRPLANE_MODE=&lt;selenium.webdriver.remote.mobile.ConnectionTypeobjectat0x10b40ee10&gt;1.2.ALL_NETWORK=&lt;selenium.webdriver.remote.mobile.ConnectionTypeobjectat0x10b40ed50&gt;1.3.classConnectionType(mask)airplane_modedatawifi1.4.Mobile.DATA_NETWORK=&lt;selenium.webdriver.remote.mobile.ConnectionTypeobjectat0x10b40edd0&gt;1.5.Mobile.WIFI_NETWORK=&lt;selenium.webdriver.remote.mobile.ConnectionTypeobjectat0x10b40ed90&gt;1.6.Mobile.context返回当前上下文（Native或WebView）。1.7.Mobile.contexts返回可用上下文列表1.8.Mobile.network_connection1.9.Mobile.set_network_connection(network)设置远程设备的网络连接。设置飞机模式的示例：driver.mobile.set_network_connection(driver.mobile.AIRPLANE_MODE)"}, "md/selenium/webdriver/remote/remote_connection.html": {"url": "md/selenium/webdriver/remote/remote_connection.html", "title": "selenium.webdriver.remote.remote_connection", "keywords": "", "body": "selenium.webdriver.remote.remote_connection1.classselenium.webdriver.remote.remote_connection.HttpErrorHandler自定义HTTP错误处理程序。用于返回Response对象，而不是引发HTTPError异常。1.1.http_error_default(req,fp,code,msg,headers)默认HTTP错误处理程序。参数：req-原始的Request对象。fp-响应正文文件对象。code-服务器返回的HTTP状态代码。msg-服务器返回的HTTP状态消息。headers-响应标头。返回值：一个新的Response对象。2.classselenium.webdriver.remote.remote_connection.RemoteConnection(remote_server_addr,keep_alive=False,resolve_ip=True)与RemoteWebDriver服务器的连接。使用WebDriver有线协议与服务器通信：https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol2.1.execute(command,params)将命令发送到远程服务器。映射到命令的URL所需的任何路径替换都应包含在命令参数中。参数：command-指定要执行的命令的字符串。params-使用命令作为其JSON有效负载发送的命名参数的字典。2.2.classmethodget_remote_connection_headers(parsed_url,keep_alive=False)获取远程请求的标头。参数：parsed_url-解析的URLkeep_alive（Boolean）-这是一个保持连接的连接（默认值：False）2.3.classmethodget_timeout()返回值：对远程连接发出的所有http请求的超时值（秒）2.4.classmethodreset_timeout()将http请求超时重置为socket._GLOBAL_DEFAULT_TIMEOUT2.5.classmethodset_timeout(timeout)覆盖默认超时参数：timeout-http请求的超时值，以秒为单位3.classselenium.webdriver.remote.remote_connection.Request(url,data=None,method=None)扩展url_request.Request以支持所有HTTP请求类型。初始化新的HTTP请求。参数：url-要将请求发送到的URL的字符串。data-随请求一起发送的数据。3.1.get_method()返回此请求使用的HTTP方法。4.classselenium.webdriver.remote.remote_connection.Response(fp,code,headers,url)表示HTTP响应。初始化新响应。参数：fp-响应正文文件对象。code-服务器返回的HTTP状态代码。headers-服务器返回的标头字典。url-此Response表示的检索到的资源的URL。4.1.close()关闭响应正文文件对象。4.2.geturl()返回此响应中返回的资源的URL。4.3.info()返回响应标头。"}, "md/selenium/webdriver/remote/utils.html": {"url": "md/selenium/webdriver/remote/utils.html", "title": "selenium.webdriver.remote.utils", "keywords": "", "body": "selenium.webdriver.remote.utils1.selenium.webdriver.remote.utils.dump_json(json_struct)2.selenium.webdriver.remote.utils.format_json(json_struct)3.selenium.webdriver.remote.utils.load_json(s)4.selenium.webdriver.remote.utils.unzip_to_temp_dir(zip_file_name)将zipfile解压缩到临时目录。如果成功则返回解压缩文件的目录，否则返回None。"}, "md/selenium/webdriver/remote/webdriver.html": {"url": "md/selenium/webdriver/remote/webdriver.html", "title": "selenium.webdriver.remote.webdriver", "keywords": "", "body": "selenium.webdriver.remote.webdriverWebDriver实现。1.classselenium.webdriver.remote.webdriver.WebDriver(command_executor='http://127.0.0.1:4444/wd/hub',desired_capabilities=None,browser_profile=None,proxy=None,keep_alive=False,file_detector=None,options=None)通过向远程服务器发送命令来控制浏览器。该服务器应运行WebDriver协议，如https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol中所定义。属性：session_id-此WebDriver启动和控制的浏览器会话的字符串ID。capabilities-返回此浏览器会话的有效功能。请参阅https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilitiescommand_executor-用于执行命令的remote_connection.RemoteConnection对象。error_handler-用于处理错误的errorhandler.ErrorHandler对象。创建一个使用有线协议发出命令的新驱动程序。参数：command_executor-表示远程服务器的URL或自定义的字符串remote_connection.RemoteConnection对象。默认为http://127.0.0.1:4444/wd/hub。desired_capabilities-请求的功能字典，启动浏览器会话。必需参数。browser_profile-一个selenium.webdriver.firefox.firefox_profile.FirefoxProfile对象。仅在请求Firefox时使用。可选的。proxy-一个selenium.webdriver.common.proxy.Proxy对象。如果可能，请使用给定的代理设置启动。可选的。keep_alive-是否配置要使用的remote_connection.RemoteConnectionHTTP保持活跃。默认为False。file_detector-在实例化期间传递自定义文件检测器对象。如果没有，将使用默认的LocalFileDetector()。options-驱动程序选项Options的实例。1.1.add_cookie(cookie_dict)在当前会话中添加cookie。参数：cookie_dict:一个字典对象，带有必需的键-&quot;name&quot;、&quot;value&quot;;可选键-&quot;path&quot;,&quot;domain&quot;,&quot;secure&quot;,&quot;expiry&quot;用法：driver.add_cookie({&#x27;name&#x27;:&#x27;foo&#x27;,&#x27;value&#x27;:&#x27;bar&#x27;})driver.add_cookie({&#x27;name&#x27;:&#x27;foo&#x27;,&#x27;value&#x27;:&#x27;bar&#x27;,&#x27;path&#x27;:&#x27;/&#x27;})driver.add_cookie({&#x27;name&#x27;:&#x27;foo&#x27;,&#x27;value&#x27;:&#x27;bar&#x27;,&#x27;path&#x27;:&#x27;/&#x27;,&#x27;secure&#x27;:True})1.2.application_cache返回ApplicationCache对象以与浏览器应用程序缓存交互1.3.back()在浏览器历史记录中向后退一步。用法：driver.back()1.4.close()关闭当前窗口。用法：driver.close()1.5.create_web_element(element_id)使用指定的element_id创建Web元素。1.6.current_url获取当前页面的URL。用法：driver.current_url1.7.current_window_handle返回当前窗口的句柄。用法：driver.current_window_handle1.8.delete_all_cookies()删除会话范围内的所有cookie。用法：driver.delete_all_cookies()1.9.delete_cookie(name)删除具有给定名称的单个cookie。用法：driver.delete_cookie(&#x27;my_cookie&#x27;)1.10.desired_capabilities返回驱动程序当前所需的功能1.11.execute(driver_command,params=None)发送命令由command.CommandExecutor执行。参数：driver_command：要作为字符串执行的命令的名称。params：使用命令发送的命名参数的字典。返回：命令的JSON响应加载到字典对象中。1.12.execute_async_script(script,*args)异步执行当前窗口/框架中的JavaScript。参数：script:要执行的JavaScript。*args:JavaScript的任何适用参数。用法：script=&quot;varcallback=arguments[arguments.length-1];window.setTimeout(function(){callback(&#x27;timeout&#x27;)},3000);&quot;driver.execute_async_script(script)1.13.execute_script(script,*args)在当前窗口/框架中同步执行JavaScript。参数：script:要执行的JavaScript。*args:JavaScript的任何适用参数。用法：driver.execute_script(&#x27;returndocument.title;&#x27;)1.14.file_detector1.15.file_detector_context(*args,**kwds)在有限的上下文中覆盖当前文件检测器（如有必要）。确保之后设置原始文件检测器。例如：webdriver.file_detector_context(UselessFileDetector):someinput.send_keys(&#x27;/etc/hosts&#x27;)参数：file_detector_class-所需文件检测器的类。如果班级不同从当前的file_detector开始，然后使用args和kwargs对类进行实例化，并在上下文管理器的持续时间内用作文件检测器。args-在期间传递给文件检测器类的可选参数实例。kwargs-关键字参数，以与args相同的方式传递。1.16.find_element(by='id',value=None)找到给定By策略和定位器的元素。尽可能优先使用find_element_by_*方法。用法：element=driver.find_element(By.ID,&#x27;foo&#x27;)返回类型：WebElement1.17.find_element_by_class_name(name)按类名查找元素。参数：name:要查找的元素的类名。返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_class_name(&#x27;foo&#x27;)1.18.find_element_by_css_selector(css_selector)通过css选择器查​​找元素。参数：css_selector-CSS选择器字符串，例如：'a.nav#home'返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_css_selector(&#x27;#foo&#x27;)1.19.find_element_by_id(id_)按id查找元素。参数：id_-要查找的元素的id。返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_id(&#x27;foo&#x27;)1.20.find_element_by_link_text(link_text)按链接文本查找元素。参数：link_text:要查找的元素的文本。返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_link_text(&#x27;SignIn&#x27;)1.21.find_element_by_name(name)按名称查找元素。参数：name:要查找的元素的名称。返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_name(&#x27;foo&#x27;)1.22.find_element_by_partial_link_text(link_text)通过其链接文本的部分匹配来查找元素。参数：link_text:要部分匹配的元素的文本。返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_partial_link_text(&#x27;Sign&#x27;)1.23.find_element_by_tag_name(name)按标签名称查找元素。参数：name-html标记的名称（例如：h1，a，span）返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_tag_name(&#x27;h1&#x27;)1.24.find_element_by_xpath(xpath)通过xpath查找元素。参数：xpath-通过xpath查找元素。返回：WebElement-找到的元素Raises:NoSuchElementException-如果找不到该元素用法：element=driver.find_element_by_xpath(&#x27;//div/td[1]&#x27;)1.25.find_elements(by='id',value=None)查找按策略和定位器给出的多个元素。尽可能优先使用find_elements_by_*方法。用法：elements=driver.find_elements(By.CLASS_NAME,&#x27;foo&#x27;)返回类型：WebElement列表1.26.find_elements_by_class_name(name)按类名查找多个元素。参数：name:要查找的元素的类名。返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_class_name(&#x27;foo&#x27;)1.27.find_elements_by_css_selector(css_selector)通过css选择器查​​找多个元素。参数：css_selector-CSS选择器字符串，例如：'a.nav#home'返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_css_selector(&#x27;.foo&#x27;)1.28.find_elements_by_id(id_)按id查找多个元素。参数：id_-要查找的元素的ID。返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_id(&#x27;foo&#x27;)1.29.find_elements_by_link_text(text)按链接文本查找多个元素。参数：link_text:要查找的元素的文本。返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_link_text(&#x27;SignIn&#x27;)1.30.find_elements_by_name(name)按名称查找元素。参数：name:要查找的元素的名称。返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_name(&#x27;foo&#x27;)1.31.find_elements_by_partial_link_text(link_text)通过链接文本的部分匹配来查找多个元素。参数：link_text:要部分匹配的元素的文本。返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_partial_link_text(&#x27;Sign&#x27;)1.32.find_elements_by_tag_name(name)按标签名称查找元素。参数：name-html标记的名称（例如：h1，a，span）返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_tag_name(&#x27;h1&#x27;)1.33.find_elements_by_xpath(xpath)通过xpath查找多个元素。参数：xpath-要查找的元素的xpath定位器。返回：WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=driver.find_elements_by_xpath(&quot;//div[contains(@class,&#x27;foo&#x27;)]&quot;)1.34.forward()在浏览器历史记录中前进一步。用法：driver.forward()1.35.fullscreen_window()调用特定于窗口管理器的全屏操作1.36.get(url)在当前浏览器会话中加载网页。1.37.get_cookie(name)按名称获取单个cookie。如果找到则返回cookie，否则返回None。用法：driver.get_cookie(&#x27;my_cookie&#x27;)1.38.get_cookies()返回一组字典，对应于当前会话中可见的cookie。用法：driver.get_cookies()1.39.get_log(log_type)获取给定日志类型的日志参数：log_type：将返回的日志类型用法：driver.get_log(&#x27;browser&#x27;)driver.get_log(&#x27;driver&#x27;)driver.get_log(&#x27;client&#x27;)driver.get_log(&#x27;server&#x27;)1.40.get_screenshot_as_base64()获取当前窗口的屏幕截图作为base64编码的字符串。这在HTML中的嵌入图像中很有用。用法：driver.get_screenshot_as_base64()1.41.get_screenshot_as_file(filename)将当前窗口的屏幕截图保存到PNG图像文件。如果存在任何IOError则返回false，否则返回True。在文件名中使用完整路径。参数：filename:希望将屏幕截图保存到的完整路径。这应该以.png扩展名结尾。用法：driver.get_screenshot_as_file(&#x27;/Screenshots/foo.png&#x27;)1.42.get_screenshot_as_png()获取当前窗口的屏幕截图作为二进制数据。用法：driver.get_screenshot_as_png()1.43.get_window_position(windowHandle='current')获取当前窗口的x，y位置。用法：driver.get_window_position()1.44.get_window_rect()获取窗口的x，y坐标以及当前窗口的高度和宽度。用法：driver.get_window_rect()1.45.get_window_size(windowHandle='current')获取当前窗口的宽度和高度。用法：driver.get_window_size()1.46.implicitly_wait(time_to_wait)设置超时以隐式等待找到元素，或完成命令。此方法仅需要在每个会话中调用一次。要设置execute_async_script调用的超时，请参阅set_script_timeout。参数：time_to_wait:等待的时间（以秒为单位）用法：driver.implicitly_wait(30)1.47.log_types获取可用日志类型的列表用法：driver.log_types1.48.maximize_window()最大化webdriver正在使用的当前窗口1.49.minimize_window()调用特定于窗口管理器的最小化操作1.50.mobile1.51.name返回此实例的基础浏览器的名称。用法：name=driver.name1.52.orientation获取设备的当前方向用法：orientation=driver.orientation1.53.page_source获取当前页面的源。用法：driver.page_source1.54.quit()退出驱动程序并关闭每个关联的窗口。用法：driver.quit()1.55.refresh()刷新当前页面。用法：driver.refresh()1.56.save_screenshot(filename)将当前窗口的屏幕截图保存到PNG图像文件。如果存在任何IOError则返回false，否则返回True。在文件名中使用完整路径。参数：filename:您希望将屏幕截图保存到的完整路径。这应该以。png扩展名结尾。用法：driver.save_screenshot(&#x27;/Screenshots/foo.png&#x27;)1.57.set_page_load_timeout(time_to_wait)设置等待页面加载完成的时间参数：time_to_wait:等待的时间用法：driver.set_page_load_timeout(30)1.58.set_script_timeout(time_to_wait)设置脚本在一段时间内应该等待的时间参数：time_to_wait:等待的时间（以秒为单位）用法：driver.set_script_timeout(30)1.59.set_window_position(x,y,windowHandle='current')设置当前窗口的x，y位置。(window.moveTo)参数：x：用于设置窗口位置的x坐标（以像素为单位）y：用于设置窗口位置的y坐标（以像素为单位）用法：driver.set_window_position(0,0)1.60.set_window_rect(x=None,y=None,width=None,height=None)设置窗口的x，y坐标以及当前窗口的高度和宽度。用法：driver.set_window_rect(x=10,y=10)driver.set_window_rect(width=100,height=200)driver.set_window_rect(x=10,y=10,width=100,height=200)1.61.set_window_size(width,height,windowHandle='current')设置当前窗口的宽度和高度。(window.resizeTo)参数：width：设置窗口的宽度（以像素为单位）height：设置窗口的高度（以像素为单位）用法：driver.set_window_size(800,600)1.62.start_client()在开始新会话之前调用。可以重写此方法以定义自定义启动行为。1.63.start_session(capabilities,browser_profile=None)创建具有所需功能的新会话。参数：browser_name-要请求的浏览器的名称。version-要请求的浏览器版本。platform-请求浏览器的平台。javascript_enabled-新会话是否应支持JavaScript。browser_profile-一个selenium.webdriver.firefox.firefox_profile.FirefoxProfile对象。仅在请求Firefox时使用。1.64.stop_client()执行退出命令后调用。可以重写此方法以定义自定义关闭行为。1.65.switch_to返回：SwitchTo:包含将焦点切换到的所有选项的对象用法：element=driver.switch_to.active_elementalert=driver.switch_to.alertdriver.switch_to.default_content()driver.switch_to.frame(&#x27;frame_name&#x27;)driver.switch_to.frame(1)driver.switch_to.frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])driver.switch_to.parent_frame()driver.switch_to.window(&#x27;main&#x27;)1.66.switch_to_active_element()不推荐，请使用driver.switch_to.active_element1.67.switch_to_alert()不推荐，请使用driver.switch_to.alert1.68.switch_to_default_content()不推荐，请使用driver.switch_to.default_content1.69.switch_to_frame(frame_reference)不推荐，请使用driver.switch_to.frame1.70.switch_to_window(window_name)不推荐，请使用driver.switch_to.window1.71.title返回当前页面的标题。用法：title=driver.title1.72.window_handles返回当前会话中所有窗口的句柄。用法：driver.window_handles"}, "md/selenium/webdriver/remote/webelement.html": {"url": "md/selenium/webdriver/remote/webelement.html", "title": "selenium.webdriver.remote.webelement", "keywords": "", "body": "selenium.webdriver.remote.webelement1.classselenium.webdriver.remote.webelement.WebElement(parent,id_,w3c=False)表示DOM元素。通常，与页面交互的所有操作都将通过此接口执行。所有方法调用都将进行新鲜度检查，以确保元素引用仍然有效。这基本上决定了元素是否仍然附加到DOM。如果此测试失败，则抛出StaleElementReferenceException，并且将来对此实例的所有调用都将失败。1.1.clear()如果文本是文本输入元素，则清除文本。1.2.click()单击元素。1.3.find_element(by='id',value=None)¶找到给定By策略和定位器的元素。尽可能优先使用find_element_by_*方法。用法：element=element.find_element(By.ID,&#x27;foo&#x27;)返回类型：WebElement1.4.find_element_by_class_name(name)查找此元素的子元素按classname.参数name:要查找的元素的类名返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：element=element.find_element_by_class_name(&#x27;foo&#x27;)1.5.find_element_by_css_selector(css_selector)查找此元素的子元素按CSSselector.参数css_selector-CSS选择器字符串，例如：'a.nav#home'返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：element=element.find_element_by_css_selector(&#x27;#foo&#x27;)1.6.find_element_by_id(id_)查找此元素的子元素按ID.参数id_-I要查找的子元素的ID返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：foo_element=element.find_element_by_id(&#x27;foo&#x27;)1.7.find_element_by_link_text(link_text)查找此元素的子元素按可见linktext.参数link_text-要搜索的链接文本字符串。返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：element=element.find_element_by_link_text(&#x27;SignIn&#x27;)1.8.find_element_by_name(name)查找此元素的子元素按name.参数name-要查找的元素的name属性返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：element=element.find_element_by_name(&#x27;foo&#x27;)1.9.find_element_by_partial_link_text(link_text)查找此元素的子元素按部分可见linktext.参数link_text:要部分匹配的元素的文本返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：element=element.find_element_by_partial_link_text(&#x27;Sign&#x27;)1.10.find_element_by_tag_name(name)查找此元素的子元素按tagname.参数name-html标记的名称(eg:h1,a,span)返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：element=element.find_element_by_tag_name(&#x27;h1&#x27;)1.11.find_element_by_xpath(xpath)通过xpath查找元素参数xpath-要定位的元素的xpath。&quot;//input[@class='myelement']&quot;注意：基本路径将相对于此元素的位置。这将选择此元素下的第一个链接。myelement.find_element_by_xpath(&quot;.//a&quot;)但是，这将选择页面上的第一个链接。myelement.find_element_by_xpath(&quot;//a&quot;)返回WebElement-如果找到元素Raises:NoSuchElementException-如果找不到该元素用法：element=element.find_element_by_xpath(&#x27;//div/td[1]&#x27;)1.12.find_elements(by='id',value=None)查找按策略和定位器给出的元素。尽可能优先使用find_elements_by_*方法。用法：element=element.find_elements(By.CLASS_NAME,&#x27;foo&#x27;)返回类型：WebElement列表1.13.find_elements_by_class_name(name)查找此元素的子元素中的元素列表，通过classname.参数name:要查找的元素的类名返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_class_name(&#x27;foo&#x27;)1.14.find_elements_by_css_selector(css_selector)查找此元素的子元素中的元素列表，通过CSSselector.参数css_selector-CSS选择器字符串，例如：'a.nav#home'返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_css_selector(&#x27;.foo&#x27;)1.15.find_elements_by_id(id_)查找此元素的子元素中的元素列表，通过ID。参数id_-要查找的子元素的ID返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_id(&#x27;foo&#x27;)1.16.find_elements_by_link_text(link_text)查找此元素的子元素中的元素列表，通过可见linktext.参数link_text-要搜索的链接文本字符串。返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_link_text(&#x27;SignIn&#x27;)1.17.find_elements_by_name(name)按名称查找此元素的子元素中的元素列表参数name-要搜索的name属性返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_name(&#x27;foo&#x27;)1.18.find_elements_by_partial_link_text(link_text)查找此元素的子元素中的元素列表，通过partiallinktext.参数link_text:要部分匹配的元素的文本返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_partial_link_text(&#x27;Sign&#x27;)1.19.find_elements_by_tag_name(name)查找此元素的子元素中的元素列表，通过tagname.参数name-html标记的名称(eg:h1,a,span)返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_tag_name(&#x27;h1&#x27;)1.20.find_elements_by_xpath(xpath)通过xpath查找元素中的元素列表参数xpath-xpath定位器字符串注意：基本路径将相对于此元素的位置这将选择此元素下的所有链接myelement.find_elements_by_xpath(&quot;.//a&quot;)但是，这将选择页面本身中的所有链接。myelement.find_elements_by_xpath(&quot;//a&quot;)返回WebElement列表-包含元素的列表（如果找到）。如果没有，则为空列表用法：elements=element.find_elements_by_xpath(&quot;//div[contains(@class,&#x27;foo&#x27;)]&quot;)1.21.get_attribute(name)获取元素的给定属性或属性值。此方法将首先尝试返回具有给定名称的属性的值。如果不存在具有该名称的属性，则返回具有相同名称的属性的值。如果没有具有该名称的属性，则返回None。被视为真实的值，即等于True或False，将作为布尔值返回。所有其他非None值将作为字符串返回。对于不存在的属性或属性，返回None。参数name-要检索的属性/属性的名称举例：#检查&quot;active&quot;CSS类是否应用于元素is_active=&quot;active&quot;intarget_element.get_attribute(&quot;class&quot;)1.22.get_property(name)获取元素的给定属性参数name-要检索的属性的名称举例：text_length=target_element.get_property(&quot;text_length&quot;)1.23.idselenium内部使用ID这主要供内部使用。简单的用例，例如检查2个webelements是否引用相同的元素，可以使用==来完成：ifelement1==element2:print(&quot;These2areequal&quot;)1.24.is_displayed()元素是否对用户可见。1.25.is_enabled()返回元素是否已启用。1.26.is_selected()返回是否选中元素。可用于检查是否选中了复选框或单选按钮。1.27.location可渲染画布中元素的位置。1.28.location_once_scrolled_into_view这个属性可以在没有警告的情况下改变。用这个来发现屏幕上的一个元素是什么，这样我们就可以点击它。这种方法应该使元素被滚动到视图中。返回屏幕上的左上角位置，如果元素不可见，则返回None。1.29.parent找到此元素的WebDriver实例的内部引用1.30.rect包含元素大小和位置的字典1.31.screenshot(filename)将当前元素的屏幕截图保存到PNG图像文件。如果存在任何IOError则返回false，否则返回True。在文件名中使用完整路径。参数filename:希望将屏幕截图保存到的完整路径。这应该以.png扩展名结尾。用法：element.screenshot(&#x27;/Screenshots/foo.png&#x27;)1.32.screenshot_as_base64获取当前元素的屏幕截图作为base64编码的字符串用法：img_b64=element.screenshot_as_base641.33.screenshot_as_png获取当前元素的屏幕截图作为二进制数据用法：element_png=element.screenshot_as_png1.34.send_keys(*value)模拟键入元素参数value-用于键入或设置表单字段的字符串。对于设置文件输入，这可以是本地文件路径。使用此命令发送简单的键事件或填写表单字段：form_textfield=driver.find_element_by_name(&#x27;username&#x27;)form_textfield.send_keys(&quot;admin&quot;)这也可用于设置文件输入file_input=driver.find_element_by_name(&#x27;profilePic&#x27;)file_input.send_keys(&quot;path/to/profilepic.gif&quot;)#通常，最好将文件路径包装在操作系统中的一个方法中。#返回实际路径以支持交叉操作系统测试的路径。#file_input.send_keys(os.path.abspath(&quot;path/to/profilepic.gif&quot;))1.35.size元素的大小1.36.submit()提交表单1.37.tag_name此元素的tagName属性1.38.text元素的文本1.39.value_of_css_property(property_name)CSS属性的值"}, "md/selenium/webdriver/safari/service.html": {"url": "md/selenium/webdriver/safari/service.html", "title": "selenium.webdriver.safari.service", "keywords": "", "body": "selenium.webdriver.safari.service1.classselenium.webdriver.safari.service.Service(executable_path,port=0,quiet=False)管理SafariDriver启动和停止的对象创建服务的新实例参数：executable_path:SafariDriver的路径port:服务正在运行的端口1.1.command_line_args()1.2.service_url获取SafariDriver服务的URL"}, "md/selenium/webdriver/safari/webdriver.html": {"url": "md/selenium/webdriver/safari/webdriver.html", "title": "selenium.webdriver.safari.webdriver", "keywords": "", "body": "selenium.webdriver.safari.webdriver1.classselenium.webdriver.safari.webdriver.WebDriver(port=0,executable_path='/usr/bin/safaridriver',reuse_service=False,desired_capabilities={'version':'','browserName':'safari','platform':'MAC'},quiet=False)控制SafariDriver并允许您驱动浏览器。创建一个新的Safari驱动程序实例，并启动或查找正在运行的safaridriver服务。参数：port-safaridriver服务应侦听新连接的端口。如果为零，将找到一个空闲端口。quiet-如果为True，则驱动程序的stdout和stderr被抑制。executable_path-要使用的自定义safaridriver可执行文件的路径。如果不存在，则使用/usr/bin/safaridriver。desired_capabilities：具有所需功能的Dictionary对象（可用于提供各种Safari开关）。reuse_service-如果为True，则不生成safaridriver实例；相反，连接到外部启动的已经运行的服务。1.1.debug()1.2.get_permission(permission)1.3.quit()关闭浏览器并关闭启动SafariDriver时启动的SafariDriver可执行文件1.4.set_permission(permission,value)"}}